package arrays;

/*
 * Everything related to bit operations and 0's, 1's in an array. 
 * Author: Sunil Kata1
 * */

public class BitArray {

	public BitArray(){
		
	}
	
	/*
	 * Push all non-zero elements of the array to the right(end of array), in place.
	 * 
	 * One solution: Start at n with loop variable and index variable. index points to leftmost non-zero
	 * element so far, i.e., index is the start of rightmost sub-array that has no zeroes.
	 * If a non-zero element is found by the loop variable, index is decremented (meaning sub-array 
	 * increased towards left) by 1.
	 * Index and loop part only when a zero is encountered.  	  
	 * */
	
	public void nonZeroShift(int input[]) {
		int inputSize = input.length;
		
		if(inputSize <= 0) // invalid array
			return;

		int index = inputSize;	// This handles a border case, where the sub array of size 1.	

		for ( int i = inputSize-1; i > -1; i--) {
			if(input[i] != 0) {
				index--;
				input[index] = input[i];
			}
		}
		
		for ( int k = 0; k < index; k++ ) {
			input[k] = 0;
		}
		return;
	}
	
	/*
	 * Generates/Prints all possible permutations for a given number n, recursively.
	 * Solution:
	 * 				Loop Variable
	 * 					|	
	 * 			       \|/
	 * 			Swap [1,2,3,..,n]	----->	[2,1,3,..,n]	--> Perm[1,3,..,n] is called.
	 *                /|\
	 *                 |
	 *                 |
	 *                startIndex 
	 * 
	 *    When Perm[n] is reached, the whole array is printed as one permutation is generated by swaps.            
	 *                
	 *    Keep swapping Loop Variable with the startIndex and do all permutations on that swapped array by incrementing the startIndex
	 *    Swap Back. Increment the loop variable. 
	 *    So, P[1,2,3] will go thru P[2,3] , P[3,2] with 1 as start index. P[1,3] and P[3,1] with 2 as start index. P[1,2] and P[2,1] with 3 
	 *    as start index.
	 *    P[3,2] will go thru P[3] with 2 as start index and so on.
	 *    
	 * */
	
	public void Perm(int arr[], int startIndex) {

		if(startIndex == arr.length - 1) {
			// print the whole array
			for(int j = 0; j < arr.length; j++) {
				System.out.print(arr[j]+" ");
			}
			System.out.print(" \n");
		}
		else {
			for(int i = startIndex; i < arr.length; i++) {
				swap(arr, i,startIndex);
				Perm(arr, startIndex+1);
				swap(arr, startIndex, i);
			}	
		}
	}
	
	public void swap(int arr[], int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}
